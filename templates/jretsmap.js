let map;
var intervalId;
let marker;
let marker_t;
let marker_o;
let route_before;
let route_after;
let mapData = {"mapName":"sample", "info":[
  {"dist":350,"limit":45,"note":null,"lng":139.7665783006,"lat":35.6796667888},
  {"dist":630,"limit":65,"note":null,"lng":139.7654601391,"lat":35.6773152466},
  {"dist":810,"limit":105,"note":110.0,"lng":139.7644694577,"lat":35.6759165661},
  {"dist":1090,"limit":100,"note":105.0,"lng":139.7622523697,"lat":35.6741652777},
  {"dist":1150,"limit":85,"note":90.0,"lng":139.7617709231,"lat":35.6737936527},
  {"dist":1670,"limit":75,"note":80.0,"lng":139.7589557441,"lat":35.6697496353},
  {"dist":2450,"limit":100,"note":105.0,"lng":139.7587522492,"lat":35.6628327736},
  {"dist":3670,"limit":105,"note":110.0,"lng":139.7563342093,"lat":35.6520444657}
]};

let ov;

var followControl;
var targetControl;
var infoDisplay;

var follow = true;
var followWide = false;
var northUp = true;
var target = false;
var overview = false;
var demo = false;
var darkMode = false;
var colorScheme = 'LIGHT';
var heading = 229.3;
var initRotation = 2;
var _scale = 17;

var _d = 0;

var mapTypeNo = 0;
var mapTypes = [
  {
    name: "roadmap",
    icon: "signpost"
  },
  {
    name: "terrain",
    icon: "landscape"
  },
  {
    name: "hybrid",
    icon: "satellite"
  },
  {
    name: "satellite",
    icon: "photo"
  }
]


//SyncDataの初期データ
var syncData = {
  "CanStart": true,
  "Color": "#F68B1E",
  "Lat": 35.67477678841941,
  "Location_m": 710.1481437683105,
  "Lon": 139.76313974303707,
  "OriginLocation_m": 0,
  "OriginName": "東京 [TYO] (JT-01)",
  "Pc_Time_ms": 1729050140839,
  "Route": [
    {
      "dist": 309.2570859717394,
      "lat": 35.6800042596972,
      "lng": 139.766755566793
    },
    {
      "dist": 319.2362039387666,
      "lat": 35.6799207724647,
      "lng": 139.766714565807
    },
    {
      "dist": 329.21584019054296,
      "lat": 35.6798378518781,
      "lng": 139.766671857633
    },
    {
      "dist": 339.1960120617919,
      "lat": 35.6797555209705,
      "lng": 139.766627454136
    },
    {
      "dist": 339.1960120617919,
      "lat": 35.6797555209705,
      "lng": 139.766627454136
    },
    {
      "dist": 339.1960120617919,
      "lat": 35.6797555209705,
      "lng": 139.766627454136
    },
    {
      "dist": 340.1940708419544,
      "lat": 35.679747321194,
      "lng": 139.766622921015
    },
    {
      "dist": 350.17468719275786,
      "lat": 35.6796653541425,
      "lng": 139.766577505699
    },
    {
      "dist": 360.15530516102973,
      "lat": 35.679583387091,
      "lng": 139.766532090383
    },
    {
      "dist": 369.1375528646538,
      "lat": 35.6795093704969,
      "lng": 139.766491899347
    },
    {
      "dist": 379.11729432198007,
      "lat": 35.6794265660086,
      "lng": 139.766448851356
    },
    {
      "dist": 379.11729432198007,
      "lat": 35.6794265660086,
      "lng": 139.766448851356
    },
    {
      "dist": 379.11729432198007,
      "lat": 35.6794265660086,
      "lng": 139.766448851356
    },
    {
      "dist": 389.09651370478895,
      "lat": 35.679343190255,
      "lng": 139.766407508296
    },
    {
      "dist": 399.0752288014907,
      "lat": 35.6792592663954,
      "lng": 139.766367881647
    },
    {
      "dist": 409.0534578894376,
      "lat": 35.6791748177415,
      "lng": 139.766329982414
    },
    {
      "dist": 411.0490693957662,
      "lat": 35.6791578670971,
      "lng": 139.766322610791
    },
    {
      "dist": 421.02708430581794,
      "lat": 35.6790730640642,
      "lng": 139.76628592662
    },
    {
      "dist": 421.02708430581794,
      "lat": 35.6790730640642,
      "lng": 139.76628592662
    },
    {
      "dist": 421.02708430581794,
      "lat": 35.6790730640642,
      "lng": 139.76628592662
    },
    {
      "dist": 431.0051002594777,
      "lat": 35.6789882610313,
      "lng": 139.766249242449
    },
    {
      "dist": 440.9831172567463,
      "lat": 35.6789034579984,
      "lng": 139.766212558278
    },
    {
      "dist": 450.96113529868353,
      "lat": 35.6788186549655,
      "lng": 139.766175874107
    },
    {
      "dist": 460.9391543835221,
      "lat": 35.6787338519326,
      "lng": 139.766139189936
    },
    {
      "dist": 470.91717451479406,
      "lat": 35.6786490488997,
      "lng": 139.766102505765
    },
    {
      "dist": 470.91717451479406,
      "lat": 35.6786490488997,
      "lng": 139.766102505765
    },
    {
      "dist": 470.91717451479406,
      "lat": 35.6786490488997,
      "lng": 139.766102505765
    },
    {
      "dist": 480.8951956974466,
      "lat": 35.6785642458667,
      "lng": 139.766065821594
    },
    {
      "dist": 490.8732179155825,
      "lat": 35.6784794428338,
      "lng": 139.766029137423
    },
    {
      "dist": 500.8512411769732,
      "lat": 35.6783946398009,
      "lng": 139.765992453252
    },
    {
      "dist": 510.8292654844453,
      "lat": 35.678309836768,
      "lng": 139.765955769081
    },
    {
      "dist": 528.7897415758721,
      "lat": 35.6781573417093,
      "lng": 139.765889216636
    },
    {
      "dist": 528.7897415758721,
      "lat": 35.6781573417093,
      "lng": 139.765889216636
    },
    {
      "dist": 528.7897415758721,
      "lat": 35.6781573417093,
      "lng": 139.765889216636
    },
    {
      "dist": 538.7681378451201,
      "lat": 35.6780729955237,
      "lng": 139.765850971318
    },
    {
      "dist": 548.7468255367872,
      "lat": 35.6779889642193,
      "lng": 139.765811689616
    },
    {
      "dist": 558.7258112544259,
      "lat": 35.6779052561992,
      "lng": 139.765771375461
    },
    {
      "dist": 568.7051015256454,
      "lat": 35.6778218798342,
      "lng": 139.765730032886
    },
    {
      "dist": 578.6847027247353,
      "lat": 35.6777388434618,
      "lng": 139.765687666028
    },
    {
      "dist": 578.6847027247353,
      "lat": 35.6777388434618,
      "lng": 139.765687666028
    },
    {
      "dist": 578.6847027247353,
      "lat": 35.6777388434618,
      "lng": 139.765687666028
    },
    {
      "dist": 588.6646211843006,
      "lat": 35.6776561553855,
      "lng": 139.765644279124
    },
    {
      "dist": 594.6527431264572,
      "lat": 35.6776067131632,
      "lng": 139.765617759162
    },
    {
      "dist": 604.6330594574398,
      "lat": 35.6775244174223,
      "lng": 139.765573255045
    },
    {
      "dist": 614.6133773703849,
      "lat": 35.6774421216815,
      "lng": 139.765528750927
    },
    {
      "dist": 624.5936968130072,
      "lat": 35.6773598259406,
      "lng": 139.76548424681
    },
    {
      "dist": 624.5936968130072,
      "lat": 35.6773598259406,
      "lng": 139.76548424681
    },
    {
      "dist": 624.5936968130072,
      "lat": 35.6773598259406,
      "lng": 139.76548424681
    },
    {
      "dist": 634.5740178457155,
      "lat": 35.6772775301997,
      "lng": 139.765439742692
    },
    {
      "dist": 644.5543403978576,
      "lat": 35.6771952344588,
      "lng": 139.765395238575
    },
    {
      "dist": 654.534664506526,
      "lat": 35.6771129387179,
      "lng": 139.765350734458
    },
    {
      "dist": 664.5149902042191,
      "lat": 35.677030642977,
      "lng": 139.76530623034
    },
    {
      "dist": 674.4953174238171,
      "lat": 35.6769483472361,
      "lng": 139.765261726223
    },
    {
      "dist": 674.4953174238171,
      "lat": 35.6769483472361,
      "lng": 139.765261726223
    },
    {
      "dist": 674.4953174238171,
      "lat": 35.6769483472361,
      "lng": 139.765261726223
    },
    {
      "dist": 678.4878219714667,
      "lat": 35.6769156631006,
      "lng": 139.765243278012
    },
    {
      "dist": 688.4688422321252,
      "lat": 35.6768343363416,
      "lng": 139.765196156366
    },
    {
      "dist": 698.4505580454676,
      "lat": 35.6767537913525,
      "lng": 139.765147041991
    },
    {
      "dist": 708.432990872208,
      "lat": 35.6766740603503,
      "lng": 139.765095954536
    },
    {
      "dist": 718.4161610440193,
      "lat": 35.6765951752262,
      "lng": 139.765042914439
    },
    {
      "dist": 718.4161610440193,
      "lat": 35.6765951752262,
      "lng": 139.765042914439
    },
    {
      "dist": 718.4161610440193,
      "lat": 35.6765951752262,
      "lng": 139.765042914439
    },
    {
      "dist": 728.4000876649658,
      "lat": 35.6765171675334,
      "lng": 139.764987942919
    },
    {
      "dist": 738.3847887249077,
      "lat": 35.6764400684738,
      "lng": 139.764931061966
    },
    {
      "dist": 748.3702808387823,
      "lat": 35.6763639088861,
      "lng": 139.764872294336
    },
    {
      "dist": 758.3565795408788,
      "lat": 35.676288719233,
      "lng": 139.764811663536
    },
    {
      "dist": 768.343698862333,
      "lat": 35.6762145295894,
      "lng": 139.764749193822
    },
    {
      "dist": 768.343698862333,
      "lat": 35.6762145295894,
      "lng": 139.764749193822
    },
    {
      "dist": 768.343698862333,
      "lat": 35.6762145295894,
      "lng": 139.764749193822
    },
    {
      "dist": 778.3316515946548,
      "lat": 35.6761413696302,
      "lng": 139.764684910184
    },
    {
      "dist": 788.3204493134097,
      "lat": 35.6760692686184,
      "lng": 139.764618838335
    },
    {
      "dist": 798.3101019793672,
      "lat": 35.6759982553935,
      "lng": 139.764551004708
    },
    {
      "dist": 808.3006184956104,
      "lat": 35.6759283583598,
      "lng": 139.764481436435
    },
    {
      "dist": 808.3006184956104,
      "lat": 35.6759283583598,
      "lng": 139.764481436435
    },
    {
      "dist": 808.3006184956104,
      "lat": 35.6759283583598,
      "lng": 139.764481436435
    },
    {
      "dist": 808.3006184956104,
      "lat": 35.6759283583598,
      "lng": 139.764481436435
    },
    {
      "dist": 818.2917361217718,
      "lat": 35.6758590287903,
      "lng": 139.764411010074
    },
    {
      "dist": 828.282857257073,
      "lat": 35.6757896992208,
      "lng": 139.764340583712
    },
    {
      "dist": 838.2739817856414,
      "lat": 35.6757203696513,
      "lng": 139.764270157351
    },
    {
      "dist": 848.265221364429,
      "lat": 35.6756512698381,
      "lng": 139.764199390716
    },
    {
      "dist": 858.2569826925821,
      "lat": 35.6755828794738,
      "lng": 139.76412758757
    },
    {
      "dist": 858.2569826925821,
      "lat": 35.6755828794738,
      "lng": 139.76412758757
    },
    {
      "dist": 858.2569826925821,
      "lat": 35.6755828794738,
      "lng": 139.76412758757
    },
    {
      "dist": 868.249292656694,
      "lat": 35.6755152235332,
      "lng": 139.764054737745
    },
    {
      "dist": 878.2421530094059,
      "lat": 35.6754483125873,
      "lng": 139.763980852626
    },
    {
      "dist": 888.2355652447678,
      "lat": 35.6753821570908,
      "lng": 139.763905943758
    },
    {
      "dist": 898.2295304579904,
      "lat": 35.6753167673803,
      "lng": 139.763830022847
    },
    {
      "dist": 908.2240495019448,
      "lat": 35.675252153673,
      "lng": 139.763753101755
    },
    {
      "dist": 908.2240495019448,
      "lat": 35.675252153673,
      "lng": 139.763753101755
    },
    {
      "dist": 908.2240495019448,
      "lat": 35.675252153673,
      "lng": 139.763753101755
    },
    {
      "dist": 918.2191227921568,
      "lat": 35.6751883260646,
      "lng": 139.763675192502
    },
    {
      "dist": 928.2147504304507,
      "lat": 35.6751252945279,
      "lng": 139.763596307262
    },
    {
      "dist": 930.213954933971,
      "lat": 35.675112784618,
      "lng": 139.763580414178
    },
    {
      "dist": 940.2100366792678,
      "lat": 35.6750503157963,
      "lng": 139.763500852563
    },
    {
      "dist": 950.2061224161764,
      "lat": 35.6749878469746,
      "lng": 139.763421290948
    },
    {
      "dist": 950.2061224161764,
      "lat": 35.6749878469746,
      "lng": 139.763421290948
    },
    {
      "dist": 950.2061224161764,
      "lat": 35.6749878469746,
      "lng": 139.763421290948
    },
    {
      "dist": 958.2030307727448,
      "lat": 35.6749379582735,
      "lng": 139.763357539419
    },
    {
      "dist": 968.1996603828086,
      "lat": 35.6748764666102,
      "lng": 139.763276834425
    },
    {
      "dist": 978.1970265298148,
      "lat": 35.6748160761003,
      "lng": 139.763194879144
    },
    {
      "dist": 988.1951268262478,
      "lat": 35.6747568035183,
      "lng": 139.763111696341
    },
    {
      "dist": 998.1939580268536,
      "lat": 35.6746986653286,
      "lng": 139.763027309122
    },
    {
      "dist": 998.1939580268536,
      "lat": 35.6746986653286,
      "lng": 139.763027309122
    },
    {
      "dist": 998.1939580268536,
      "lat": 35.6746986653286,
      "lng": 139.763027309122
    },
    {
      "dist": 1005.1936138960068,
      "lat": 35.6746586522199,
      "lng": 139.76296753398
    },
    {
      "dist": 1015.1934332072656,
      "lat": 35.6746018959394,
      "lng": 139.762881731453
    },
    {
      "dist": 1025.1932567542212,
      "lat": 35.6745451396589,
      "lng": 139.762795928926
    },
    {
      "dist": 1035.1930845358163,
      "lat": 35.6744883833784,
      "lng": 139.762710126399
    },
    {
      "dist": 1038.1930294638305,
      "lat": 35.6744713521391,
      "lng": 139.762684390029
    },
    {
      "dist": 1038.1930294638305,
      "lat": 35.6744713521391,
      "lng": 139.762684390029
    },
    {
      "dist": 1038.1930294638305,
      "lat": 35.6744713521391,
      "lng": 139.762684390029
    },
    {
      "dist": 1048.1924560914422,
      "lat": 35.6744140750717,
      "lng": 139.762599114694
    },
    {
      "dist": 1058.191337083353,
      "lat": 35.6743559365907,
      "lng": 139.762514727414
    },
    {
      "dist": 1068.189670150587,
      "lat": 35.6742969457799,
      "lng": 139.762431241374
    },
    {
      "dist": 1078.18745334685,
      "lat": 35.6742371118565,
      "lng": 139.762348669618
    },
    {
      "dist": 1088.184684991868,
      "lat": 35.6741764441696,
      "lng": 139.762267025048
    },
    {
      "dist": 1088.184684991868,
      "lat": 35.6741764441696,
      "lng": 139.762267025048
    },
    {
      "dist": 1088.184684991868,
      "lat": 35.6741764441696,
      "lng": 139.762267025048
    },
    {
      "dist": 1098.1813639133793,
      "lat": 35.6741149521983,
      "lng": 139.762186320419
    },
    {
      "dist": 1099.1810077822545,
      "lat": 35.6741087580343,
      "lng": 139.76217830214
    },
    {
      "dist": 1109.177420780454,
      "lat": 35.6740467756965,
      "lng": 139.762098167025
    },
    {
      "dist": 1119.17383780692,
      "lat": 35.6739847933586,
      "lng": 139.76201803191
    },
    {
      "dist": 1129.17025884752,
      "lat": 35.6739228110208,
      "lng": 139.761937896795
    },
    {
      "dist": 1129.17025884752,
      "lat": 35.6739228110208,
      "lng": 139.761937896795
    },
    {
      "dist": 1129.17025884752,
      "lat": 35.6739228110208,
      "lng": 139.761937896795
    },
    {
      "dist": 1139.1666839110862,
      "lat": 35.673860828683,
      "lng": 139.76185776168
    },
    {
      "dist": 1149.163112998326,
      "lat": 35.6737988463452,
      "lng": 139.761777626565
    },
    {
      "dist": 1158.1598533789415,
      "lat": 35.6737430134934,
      "lng": 139.76170556239
    },
    {
      "dist": 1168.1555586622003,
      "lat": 35.6736801694438,
      "lng": 139.761626453002
    },
    {
      "dist": 1178.1505246989104,
      "lat": 35.6736162630951,
      "lng": 139.761548643948
    },
    {
      "dist": 1178.1505246989104,
      "lat": 35.6736162630951,
      "lng": 139.761548643948
    },
    {
      "dist": 1178.1505246989104,
      "lat": 35.6736162630951,
      "lng": 139.761548643948
    },
    {
      "dist": 1188.1447516305077,
      "lat": 35.6735513121988,
      "lng": 139.761472156841
    },
    {
      "dist": 1198.1382405982015,
      "lat": 35.6734853347964,
      "lng": 139.761397012924
    },
    {
      "dist": 1208.1309933798102,
      "lat": 35.6734183492144,
      "lng": 139.76132323307
    },
    {
      "dist": 1218.1230126638998,
      "lat": 35.6733503740596,
      "lng": 139.761250837771
    },
    {
      "dist": 1228.114301940621,
      "lat": 35.6732814282135,
      "lng": 139.761179847135
    },
    {
      "dist": 1228.114301940621,
      "lat": 35.6732814282135,
      "lng": 139.761179847135
    },
    {
      "dist": 1228.114301940621,
      "lat": 35.6732814282135,
      "lng": 139.761179847135
    },
    {
      "dist": 1238.1048654794604,
      "lat": 35.6732115308273,
      "lng": 139.76111028088
    },
    {
      "dist": 1248.0947084348584,
      "lat": 35.6731407013165,
      "lng": 139.761042158327
    },
    {
      "dist": 1258.083836699259,
      "lat": 35.6730689593555,
      "lng": 139.760975498397
    },
    {
      "dist": 1268.0722569963657,
      "lat": 35.6729963248721,
      "lng": 139.760910319604
    },
    {
      "dist": 1278.0599767967103,
      "lat": 35.6729228180422,
      "lng": 139.760846640051
    },
    {
      "dist": 1278.0599767967103,
      "lat": 35.6729228180422,
      "lng": 139.760846640051
    },
    {
      "dist": 1278.0599767967103,
      "lat": 35.6729228180422,
      "lng": 139.760846640051
    },
    {
      "dist": 1288.047004345567,
      "lat": 35.6728484592838,
      "lng": 139.760784477425
    },
    {
      "dist": 1298.0333487155867,
      "lat": 35.6727732692517,
      "lng": 139.76072384899
    },
    {
      "dist": 1308.019019694807,
      "lat": 35.6726972688315,
      "lng": 139.760664771585
    },
    {
      "dist": 1318.004027868971,
      "lat": 35.6726204791339,
      "lng": 139.760607261617
    },
    {
      "dist": 1327.9883844862177,
      "lat": 35.6725429214889,
      "lng": 139.760551335059
    },
    {
      "dist": 1327.9883844862177,
      "lat": 35.6725429214889,
      "lng": 139.760551335059
    },
    {
      "dist": 1327.9883844862177,
      "lat": 35.6725429214889,
      "lng": 139.760551335059
    },
    {
      "dist": 1337.972101578255,
      "lat": 35.6724646174398,
      "lng": 139.760497007443
    },
    {
      "dist": 1347.9551918671018,
      "lat": 35.6723855887373,
      "lng": 139.760444293857
    },
    {
      "dist": 1357.9376688177226,
      "lat": 35.6723058573332,
      "lng": 139.76039320894
    },
    {
      "dist": 1367.919546533812,
      "lat": 35.6722254453747,
      "lng": 139.760343766879
    },
    {
      "dist": 1377.9008397630903,
      "lat": 35.6721443751978,
      "lng": 139.760295981406
    },
    {
      "dist": 1377.9008397630903,
      "lat": 35.6721443751978,
      "lng": 139.760295981406
    },
    {
      "dist": 1377.9008397630903,
      "lat": 35.6721443751978,
      "lng": 139.760295981406
    },
    {
      "dist": 1384.8874469793193,
      "lat": 35.6720872464859,
      "lng": 139.760263524369
    },
    {
      "dist": 1394.868174357064,
      "lat": 35.6720054152501,
      "lng": 139.760217743755
    },
    {
      "dist": 1404.8489033760236,
      "lat": 35.6719235840143,
      "lng": 139.760171963141
    },
    {
      "dist": 1414.8296340782408,
      "lat": 35.6718417527785,
      "lng": 139.760126182526
    },
    {
      "dist": 1424.810366376454,
      "lat": 35.6717599215428,
      "lng": 139.760080401912
    },
    {
      "dist": 1424.810366376454,
      "lat": 35.6717599215428,
      "lng": 139.760080401912
    },
    {
      "dist": 1424.810366376454,
      "lat": 35.6717599215428,
      "lng": 139.760080401912
    },
    {
      "dist": 1434.7911003692277,
      "lat": 35.671678090307,
      "lng": 139.760034621297
    },
    {
      "dist": 1444.7718359654157,
      "lat": 35.6715962590712,
      "lng": 139.759988840683
    },
    {
      "dist": 1454.7525732088254,
      "lat": 35.6715144278354,
      "lng": 139.759943060069
    },
    {
      "dist": 1464.7333121316046,
      "lat": 35.6714325965996,
      "lng": 139.759897279454
    },
    {
      "dist": 1474.714052652855,
      "lat": 35.6713507653639,
      "lng": 139.75985149884
    },
    {
      "dist": 1474.714052652855,
      "lat": 35.6713507653639,
      "lng": 139.75985149884
    },
    {
      "dist": 1474.714052652855,
      "lat": 35.6713507653639,
      "lng": 139.75985149884
    },
    {
      "dist": 1484.6947948276834,
      "lat": 35.6712689341281,
      "lng": 139.759805718226
    },
    {
      "dist": 1494.6755386843563,
      "lat": 35.6711871028923,
      "lng": 139.759759937611
    },
    {
      "dist": 1504.6562841472712,
      "lat": 35.6711052716565,
      "lng": 139.759714156997
    },
    {
      "dist": 1514.637031255288,
      "lat": 35.6710234404207,
      "lng": 139.759668376383
    },
    {
      "dist": 1524.6177800455014,
      "lat": 35.6709416091849,
      "lng": 139.759622595768
    },
    {
      "dist": 1524.6177800455014,
      "lat": 35.6709416091849,
      "lng": 139.759622595768
    },
    {
      "dist": 1524.6177800455014,
      "lat": 35.6709416091849,
      "lng": 139.759622595768
    },
    {
      "dist": 1534.5985304331257,
      "lat": 35.6708597779492,
      "lng": 139.759576815154
    },
    {
      "dist": 1544.5792824743291,
      "lat": 35.6707779467134,
      "lng": 139.75953103454
    },
    {
      "dist": 1554.56003619667,
      "lat": 35.6706961154776,
      "lng": 139.759485253925
    },
    {
      "dist": 1564.540791527018,
      "lat": 35.6706142842418,
      "lng": 139.759439473311
    },
    {
      "dist": 1574.5215485392098,
      "lat": 35.670532453006,
      "lng": 139.759393692696
    },
    {
      "dist": 1574.5215485392098,
      "lat": 35.670532453006,
      "lng": 139.759393692696
    },
    {
      "dist": 1574.5215485392098,
      "lat": 35.670532453006,
      "lng": 139.759393692696
    },
    {
      "dist": 1584.502307146692,
      "lat": 35.6704506217703,
      "lng": 139.759347912082
    },
    {
      "dist": 1594.4830674091684,
      "lat": 35.6703687905345,
      "lng": 139.759302131468
    },
    {
      "dist": 1604.4638293534867,
      "lat": 35.6702869592987,
      "lng": 139.759256350853
    },
    {
      "dist": 1614.4445929058163,
      "lat": 35.6702051280629,
      "lng": 139.759210570239
    },
    {
      "dist": 1624.4253580997129,
      "lat": 35.6701232968271,
      "lng": 139.759164789625
    },
    {
      "dist": 1624.4253580997129,
      "lat": 35.6701232968271,
      "lng": 139.759164789625
    },
    {
      "dist": 1624.4253580997129,
      "lat": 35.6701232968271,
      "lng": 139.759164789625
    },
    {
      "dist": 1634.406124978986,
      "lat": 35.6700414655913,
      "lng": 139.75911900901
    },
    {
      "dist": 1644.38689345249,
      "lat": 35.6699596343556,
      "lng": 139.759073228396
    },
    {
      "dist": 1654.3676635799293,
      "lat": 35.6698778031198,
      "lng": 139.759027447782
    },
    {
      "dist": 1664.3484353909762,
      "lat": 35.669795971884,
      "lng": 139.758981667167
    },
    {
      "dist": 1674.3292088089736,
      "lat": 35.6697141406482,
      "lng": 139.758935886553
    },
    {
      "dist": 1674.3292088089736,
      "lat": 35.6697141406482,
      "lng": 139.758935886553
    },
    {
      "dist": 1674.3292088089736,
      "lat": 35.6697141406482,
      "lng": 139.758935886553
    },
    {
      "dist": 1684.3099838703072,
      "lat": 35.6696323094124,
      "lng": 139.758890105939
    },
    {
      "dist": 1694.2907606145434,
      "lat": 35.6695504781766,
      "lng": 139.758844325324
    },
    {
      "dist": 1704.2715389544242,
      "lat": 35.6694686469409,
      "lng": 139.75879854471
    },
    {
      "dist": 1714.2523189860387,
      "lat": 35.6693868157051,
      "lng": 139.758752764095
    },
    {
      "dist": 1724.2331006246036,
      "lat": 35.6693049844693,
      "lng": 139.758706983481
    },
    {
      "dist": 1724.2331006246036,
      "lat": 35.6693049844693,
      "lng": 139.758706983481
    },
    {
      "dist": 1724.2331006246036,
      "lat": 35.6693049844693,
      "lng": 139.758706983481
    },
    {
      "dist": 1727.2277412268943,
      "lat": 35.6692801052879,
      "lng": 139.758694159987
    },
    {
      "dist": 1737.207248074778,
      "lat": 35.6691971584837,
      "lng": 139.758651537285
    },
    {
      "dist": 1747.1860684163785,
      "lat": 35.669113462744,
      "lng": 139.758611193882
    },
    {
      "dist": 1757.1642344634313,
      "lat": 35.6690290593983,
      "lng": 139.758573149694
    },
    {
      "dist": 1767.1417796641488,
      "lat": 35.6689439901256,
      "lng": 139.758537423503
    },
    {
      "dist": 1767.1417796641488,
      "lat": 35.6689439901256,
      "lng": 139.758537423503
    },
    {
      "dist": 1767.1417796641488,
      "lat": 35.6689439901256,
      "lng": 139.758537423503
    },
    {
      "dist": 1777.1187386915608,
      "lat": 35.6688582969336,
      "lng": 139.758504032947
    },
    {
      "dist": 1787.095147385938,
      "lat": 35.6687720221383,
      "lng": 139.75847299451
    },
    {
      "dist": 1797.071042731824,
      "lat": 35.6686852083427,
      "lng": 139.758444323513
    },
    {
      "dist": 1807.0464626665616,
      "lat": 35.6685978984161,
      "lng": 139.75841803411
    },
    {
      "dist": 1817.0214461364635,
      "lat": 35.6685101354726,
      "lng": 139.758394139277
    },
    {
      "dist": 1817.0214461364635,
      "lat": 35.6685101354726,
      "lng": 139.758394139277
    },
    {
      "dist": 1817.0214461364635,
      "lat": 35.6685101354726,
      "lng": 139.758394139277
    },
    {
      "dist": 1826.996032877079,
      "lat": 35.6684219628504,
      "lng": 139.758372650809
    },
    {
      "dist": 1836.970263502218,
      "lat": 35.6683334240895,
      "lng": 139.758353579311
    },
    {
      "dist": 1846.9441792573648,
      "lat": 35.6682445629111,
      "lng": 139.758336934196
    },
    {
      "dist": 1856.9178220316896,
      "lat": 35.6681554231955,
      "lng": 139.758322723679
    },
    {
      "dist": 1866.8912343100076,
      "lat": 35.6680660489603,
      "lng": 139.75831095477
    },
    {
      "dist": 1866.8912343100076,
      "lat": 35.6680660489603,
      "lng": 139.75831095477
    },
    {
      "dist": 1866.8912343100076,
      "lat": 35.6680660489603,
      "lng": 139.75831095477
    },
    {
      "dist": 1876.864458968579,
      "lat": 35.6679764843393,
      "lng": 139.758301633276
    },
    {
      "dist": 1886.8375392881885,
      "lat": 35.66788677356,
      "lng": 139.758294763795
    },
    {
      "dist": 1896.8105188428613,
      "lat": 35.6677969609222,
      "lng": 139.758290349712
    },
    {
      "dist": 1906.7834413624407,
      "lat": 35.6677070907762,
      "lng": 139.758288393204
    },
    {
      "dist": 1916.756350759788,
      "lat": 35.6676172075002,
      "lng": 139.758288895229
    },
    {
      "dist": 1916.756350759788,
      "lat": 35.6676172075002,
      "lng": 139.758288895229
    },
    {
      "dist": 1916.756350759788,
      "lat": 35.6676172075002,
      "lng": 139.758288895229
    },
    {
      "dist": 1926.7292909135208,
      "lat": 35.6675273554794,
      "lng": 139.758291855535
    },
    {
      "dist": 1936.70230568108,
      "lat": 35.6674375790832,
      "lng": 139.758297272654
    },
    {
      "dist": 1946.675438744718,
      "lat": 35.6673479226439,
      "lng": 139.758305143906
    },
    {
      "dist": 1956.648733566968,
      "lat": 35.6672584304344,
      "lng": 139.758315465398
    },
    {
      "dist": 1966.6222332793684,
      "lat": 35.6671691466467,
      "lng": 139.758328232029
    },
    {
      "dist": 1966.6222332793684,
      "lat": 35.6671691466467,
      "lng": 139.758328232029
    },
    {
      "dist": 1966.6222332793684,
      "lat": 35.6671691466467,
      "lng": 139.758328232029
    },
    {
      "dist": 1972.6065287366596,
      "lat": 35.6671156947623,
      "lng": 139.758337063098
    },
    {
      "dist": 1982.580506374515,
      "lat": 35.6670266893435,
      "lng": 139.758352512361
    },
    {
      "dist": 1992.5544840726388,
      "lat": 35.6669376839247,
      "lng": 139.758367961623
    },
    {
      "dist": 2002.528461855407,
      "lat": 35.6668486785058,
      "lng": 139.758383410885
    },
    {
      "dist": 2012.5024396998588,
      "lat": 35.666759673087,
      "lng": 139.758398860147
    },
    {
      "dist": 2012.5024396998588,
      "lat": 35.666759673087,
      "lng": 139.758398860147
    },
    {
      "dist": 2012.5024396998588,
      "lat": 35.666759673087,
      "lng": 139.758398860147
    },
    {
      "dist": 2022.476417626483,
      "lat": 35.6666706676681,
      "lng": 139.758414309409
    },
    {
      "dist": 2032.4503956165563,
      "lat": 35.6665816622493,
      "lng": 139.758429758671
    },
    {
      "dist": 2042.424373701872,
      "lat": 35.6664926568304,
      "lng": 139.758445207934
    },
    {
      "dist": 2051.400952510918,
      "lat": 35.6664125519535,
      "lng": 139.758459112151
    },
    {
      "dist": 2061.3749292125176,
      "lat": 35.6663235465346,
      "lng": 139.758474561294
    },
    {
      "dist": 2061.3749292125176,
      "lat": 35.6663235465346,
      "lng": 139.758474561294
    },
    {
      "dist": 2061.3749292125176,
      "lat": 35.6663235465346,
      "lng": 139.758474561294
    },
    {
      "dist": 2066.361871657696,
      "lat": 35.6662789843498,
      "lng": 139.758481748678
    },
    {
      "dist": 2076.335412908661,
      "lat": 35.666189704835,
      "lng": 139.758494564044
    },
    {
      "dist": 2086.308766742381,
      "lat": 35.6661002349584,
      "lng": 139.758505179134
    },
    {
      "dist": 2096.281968102742,
      "lat": 35.6660106105066,
      "lng": 139.758513589709
    },
    {
      "dist": 2106.2550521092357,
      "lat": 35.6659208673284,
      "lng": 139.758519792409
    },
    {
      "dist": 2106.2550521092357,
      "lat": 35.6659208673284,
      "lng": 139.758519792409
    },
    {
      "dist": 2106.2550521092357,
      "lat": 35.6659208673284,
      "lng": 139.758519792409
    },
    {
      "dist": 2116.2280541304253,
      "lat": 35.6658310413196,
      "lng": 139.758523784758
    },
    {
      "dist": 2126.201009607312,
      "lat": 35.6657411684097,
      "lng": 139.758525565164
    },
    {
      "dist": 2136.1739540911435,
      "lat": 35.6656512845466,
      "lng": 139.75852513292
    },
    {
      "dist": 2140.163193130877,
      "lat": 35.6656153359879,
      "lng": 139.75852434049
    },
    {
      "dist": 2150.136322626161,
      "lat": 35.6655254715235,
      "lng": 139.758521916948
    },
    {
      "dist": 2150.136322626161,
      "lat": 35.6655254715235,
      "lng": 139.758521916948
    },
    {
      "dist": 2150.136322626161,
      "lat": 35.6655254715235,
      "lng": 139.758521916948
    }
  ],
  "Sim_Time_ms": 43273094,
  "TargetLat": 35.66543659329352,
  "TargetLocation_m": 1860.0,
  "TargetLon": 139.75851952000264,
  "TargetName": "新橋 [SMB] (JT-02)",
  "Time_ms": 43275914,
  "MapName": "sample",
  "MapLoc_m": 1010
}

var _syncData = {};

// Flaskサーバから定期的にSyncDataを取得
async function getSyncData() {
  const response = await fetch('/sync');
  const syncData = await response.json();
  return syncData;
}

async function getMapData(mapName) {
  const response = await fetch(`./templates/limits/${mapName}.json`);
  if (response.ok) {
    const data = await response.json();
    mapData.info = data;
    mapData.mapName = mapName;
  } else {
    mapData.info = {};
    mapData.mapName = "error";
  }
  return mapData;
}

// 2つの位置間の方位を計算する関数
function calculateBearing(startLat, startLng, endLat, endLng) {
  if ((startLat==endLat) && (startLng==endLng)) {
    return null
  }

  const startLatRad = degreesToRadians(startLat);
  const startLngRad = degreesToRadians(startLng);
  const endLatRad = degreesToRadians(endLat);
  const endLngRad = degreesToRadians(endLng);
  const dLng = endLngRad - startLngRad;

  const y = Math.sin(dLng) * Math.cos(endLatRad);
  const x = Math.cos(startLatRad) * Math.sin(endLatRad) -
            Math.sin(startLatRad) * Math.cos(endLatRad) * Math.cos(dLng);

  let bearing = Math.atan2(y, x);
  bearing = radiansToDegrees(bearing);
  return (bearing + 360) % 360; // 方位を0〜360度に正規化
}

// 2つの位置間の距離を計算する関数（ハバーサインの公式）
function calculateDistance(lat1, lng1, lat2, lng2) {
  const earthRadius = 6371000; // 地球の半径（メートル）

  // 緯度と経度をラジアンに変換
  const lat1Rad = degreesToRadians(lat1);
  const lng1Rad = degreesToRadians(lng1);
  const lat2Rad = degreesToRadians(lat2);
  const lng2Rad = degreesToRadians(lng2);

  // 緯度と経度の差を計算
  const dLat = lat2Rad - lat1Rad;
  const dLng = lng2Rad - lng1Rad;

  // ハバーサインの公式で距離を計算
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1Rad) * Math.cos(lat2Rad) *
            Math.sin(dLng / 2) * Math.sin(dLng / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

  // 距離を計算（メートル単位）
  const distance = earthRadius * c;

  return distance; // メートル単位の距離
}

// 度をラジアンに変換
function degreesToRadians(degrees) {
    return degrees * (Math.PI / 180);
}

// ラジアンを度に変換
function radiansToDegrees(radians) {
    return radians * (180 / Math.PI);
}

function pixelToMeterDistance(pixel) {
  const earthCircumference = 40075016.686; // 地球の円周（メートル）
  const latRad = degreesToRadians(map.getCenter().lat()); // 緯度をラジアンに変換

  // ズームレベルに基づいて、1ピクセルがカバーする距離（メートル）を計算
  const scale = (earthCircumference * Math.cos(latRad)) / Math.pow(2, map.getZoom() + 8);

  return scale * pixel
}


function getOffsetLatLng(latLng, heading, distanceMeters) {
  const earthRadius = 6371000; // 地球の半径（メートル単位）

  // 現在の緯度をラジアンに変換
  const latRad = degreesToRadians(latLng.lat);
  const lngRad = degreesToRadians(latLng.lng);

  // 方位（ヘディング）をラジアンに変換
  const headingRad = degreesToRadians(heading);

  // 距離とヘディングに基づいて新しい緯度を計算
  const newLatRad = Math.asin(
      Math.sin(latRad) * Math.cos(distanceMeters / earthRadius) +
      Math.cos(latRad) * Math.sin(distanceMeters / earthRadius) * Math.cos(headingRad)
  );

  // 距離とヘディングに基づいて新しい経度を計算
  const newLngRad = lngRad + Math.atan2(
      Math.sin(headingRad) * Math.sin(distanceMeters / earthRadius) * Math.cos(latRad),
      Math.cos(distanceMeters / earthRadius) - Math.sin(latRad) * Math.sin(newLatRad)
  );

  // 計算した新しい緯度経度を度に変換して返す
  return {
      lat: radiansToDegrees(newLatRad),
      lng: radiansToDegrees(newLngRad)
  };
}

function getOffsetDistance(px) {
  const centerLatLng = ov.getProjection().fromContainerPixelToLatLng(new google.maps.Point(window.innerWidth/2, window.innerHeight/2));
  const bottomLatLng = ov.getProjection().fromContainerPixelToLatLng(new google.maps.Point(window.innerWidth/2, window.innerHeight - px));
  const offsetDistance = calculateDistance(centerLatLng.lat(), centerLatLng.lng(), bottomLatLng.lat(), bottomLatLng.lng());
  return offsetDistance;
}

class ControlButton {
  constructor() {
    const controlButton = document.createElement("button");
    // Set CSS for the control.
    controlButton.style.border = "0px";
    controlButton.style.borderRadius = "3px";
    controlButton.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
    controlButton.style.cursor = "pointer";
    controlButton.style.margin = "10px";
    controlButton.style.marginRight = "calc(10px + env(safe-area-inset-right))";
    controlButton.style.marginLeft = "calc(10px + env(safe-area-inset-left))";
    controlButton.style.width = "40px";
    controlButton.style.height = "40px";
    controlButton.style.padding = "0 5px";
    controlButton.style.textAlign = "center";
    
    controlButton.title = "blank";
    controlButton.type = "button";

    if (darkMode) {
      controlButton.style.background = "#444444";
      controlButton.style.color = "white";
    } else {
      controlButton.style.background = "#fff";
      controlButton.style.color = "black";
    }

    this.controlButton = controlButton;
  }

  activate() {
    if (darkMode) {
      this.controlButton.style.color = "magenta"
    } else {
      this.controlButton.style.color = "blue";
    }
  }
  
  deactivate() {
    this.controlButton.style.color = "gray";
  }
  
  normal () {
    if (darkMode) {
      this.controlButton.style.color = "white"
    } else {
      this.controlButton.style.color = "black";
    }
  }
  
  setVisibility(visible) {
    if (visible) {
      this.controlButton.style.visibility = "visible";
    } else {
      this.controlButton.style.visibility = "hidden";
    }
  }

  click() {
    this.controlButton.click();
  }
}

class ThemeControl extends ControlButton {
  constructor(map) {
    super();

    this.controlButton.title = "Click to toggle dark mode";
    this.controlButton.style.marginBottom = "0px";
    this.controlButton.style.borderBottomRightRadius = "0px";
    this.controlButton.style.borderBottomLeftRadius = "0px";
    
    
    const buttonIcon = document.createElement("span");
    buttonIcon.className = "material-symbols-outlined";
    buttonIcon.style.verticalAlign = "middle";
    
    if (darkMode) {
      buttonIcon.textContent = "dark_mode";

    } else {
      buttonIcon.textContent = "light_mode";
    }

    this.controlButton.appendChild(buttonIcon);


    this.controlButton.addEventListener("click", () => {
      darkMode = !darkMode
      if (darkMode) {
        colorScheme = google.maps.ColorScheme.DARK;
      } else {
        colorScheme = google.maps.ColorScheme.LIGHT;
      }
      
      initMap();
    });


    return this;
  }
}

class StyleControl extends ControlButton {
  constructor(map) {
    super();
    this.controlButton.style.marginTop = "0px";
    this.controlButton.style.marginBottom = "2.5px";
    this.controlButton.style.borderTopRightRadius = "0px";
    this.controlButton.style.borderTopLeftRadius = "0px";

    this.controlButton.title = "Click to toggle map style";
    
    
    this.buttonIcon = document.createElement("span");
    this.buttonIcon.className = "material-symbols-outlined";
    this.buttonIcon.style.verticalAlign = "middle";
    this.buttonIcon.textContent = mapTypes[mapTypeNo].icon;

    this.controlButton.appendChild(this.buttonIcon);
    
    
    this.controlButton.addEventListener("click", () => {
      mapTypeNo = (mapTypeNo+1) % mapTypes.length;
      this.buttonIcon.textContent = mapTypes[mapTypeNo].icon;
      this.controlButton.replaceChildren(this.buttonIcon);
      map.setMapTypeId(mapTypes[mapTypeNo].name);
    });


    return this;
  }
}

class HeadingControl extends ControlButton {
  constructor(map) {
    super();
    this.controlButton.style.marginTop = "2.5px";
    this.controlButton.style.marginBottom = "1px";
    this.controlButton.title = "Click to reset heading";

    this.update();


    this.controlButton.addEventListener("click", () => {
      map.setHeading(0);
    });

    map.addListener("heading_changed", () => {
      this.update();
    });
    
    return this;
  }
  
  update() {
    if (map.getHeading() == 0) {
      this.setVisibility(false);
    } else {
      this.setVisibility(true);
      this.controlButton.textContent = `HDG\n${map.getHeading().toFixed()}°`;
    }
  }
}

class TiltControl extends ControlButton {
  constructor(map) {
    super();
    this.controlButton.style.marginTop = "1px";
    this.controlButton.style.marginBottom = "2.5px";
    this.controlButton.title = "Click to reset tilt";

    this.update();

    this.controlButton.addEventListener("click", () => {
      if (map.getTilt() != 0) {
        map.setTilt(0);
      } else {
        map.setTilt(60);
      }
    });

    map.addListener("tilt_changed", () => {
      this.update();
    });

    return this;
  }

  update() {
    if (map.getTilt() == 0) {
      if (northUp) {
        this.setVisibility(false);
      }
    } else {
      this.setVisibility(true);
    }
    this.controlButton.textContent = `Tilt\n${map.getTilt().toFixed()}°`;
  }
}

class ZoomControl {
  constructor(map) {
    this.controlButton = document.createElement("div");
    this.controlButton.style.display = "flex";
    this.controlButton.style.flexDirection = "column";
    // this.controlButton.style.borderRadius = "3px";
    // this.controlButton.style.width = "40px";
    // this.controlButton.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
    

    const zoomInButton = new ControlButton();
    zoomInButton.controlButton.style.marginTop = "2.5px";
    zoomInButton.controlButton.style.marginBottom = "0px";
    zoomInButton.controlButton.style.borderBottomRightRadius = "0px";
    zoomInButton.controlButton.style.borderBottomLeftRadius = "0px";
    // zoomInButton.controlButton.boxShadow = "none";
    
    const zoomInButtonIcon = document.createElement("span");
    zoomInButtonIcon.className = "material-symbols-outlined";
    zoomInButtonIcon.style.verticalAlign = "middle";
    zoomInButtonIcon.textContent = "add";
    
    zoomInButton.controlButton.appendChild(zoomInButtonIcon);
    zoomInButton.controlButton.addEventListener("click", () => {
      map.setZoom(Math.round(map.getZoom() + 1));
    });
    
    const zoomDefaultButton = new ControlButton();
    zoomDefaultButton.controlButton.style.marginTop = "0px";
    zoomDefaultButton.controlButton.style.marginBottom = "0px";
    zoomDefaultButton.controlButton.style.borderRadius = "0px";
    zoomDefaultButton.controlButton.style.fontSize = "x-small";
    // zoomDefaultButton.controlButton.boxShadow = "none";
    zoomDefaultButton.controlButton.style.height = "20px";
    zoomDefaultButton.controlButton.textContent = "Zoom";
    zoomDefaultButton.controlButton.addEventListener("click", () => {
      map.setZoom(17);
    });
    
    
    const zoomOutButton = new ControlButton();
    zoomOutButton.controlButton.style.marginTop = "0px";
    zoomOutButton.controlButton.style.marginBottom = "2.5px";
    zoomOutButton.controlButton.style.borderTopRightRadius = "0px";
    zoomOutButton.controlButton.style.borderTopLeftRadius = "0px";
    // zoomOutButton.controlButton.boxShadow = "none";

    const zoomOutButtonIcon = document.createElement("span");
    zoomOutButtonIcon.className = "material-symbols-outlined";
    zoomOutButtonIcon.style.verticalAlign = "middle";
    zoomOutButtonIcon.textContent = "remove";

    zoomOutButton.controlButton.appendChild(zoomOutButtonIcon);
    zoomOutButton.controlButton.addEventListener("click", () => {
      map.setZoom(Math.round(map.getZoom() - 1));
    });

    this.controlButton.appendChild(zoomInButton.controlButton);
    this.controlButton.appendChild(zoomDefaultButton.controlButton);
    this.controlButton.appendChild(zoomOutButton.controlButton);


    // super();
    // this.controlButton.style.marginTop = "0px";
    // this.controlButton.title = "Click to reset zoom";

    // this.update();


    // this.controlButton.addEventListener("click", () => {
    //   map.setZoom(17);
    // });

    // map.addListener("zoom_changed", () => {
    //   this.update();
    // });

    return this;
  }

  update() {
    // if (map.getZoom() == 17) {
    //   this.setVisibility(false);
    // } else {
    //   this.setVisibility(true);
    //   this.controlButton.textContent = `Zoom\n${map.getZoom().toFixed(1)}`;
    // }
  }
}

class FollowControl extends ControlButton {
  constructor(map) {
    super();
    this.controlButton.style.width = "50px";
    this.controlButton.style.height = "50px";
    this.controlButton.style.borderRadius = "25px";
    this.controlButton.style.margin = "5px";
    this.controlButton.style.marginRight = "calc(5px + env(safe-area-inset-right))";
    this.controlButton.title = "Click to toggle follow mode";
    
    const buttonIcon = document.createElement("span");
    buttonIcon.className = "material-symbols-outlined";
    buttonIcon.style.verticalAlign = "middle";

    if (northUp) {
      buttonIcon.textContent = "my_location";
    } else {
      buttonIcon.textContent = "assistant_navigation";
    }
    
    if (follow) {
      this.activate();
    } else {
      this.deactivate();
    }

    this.controlButton.appendChild(buttonIcon);


    this.controlButton.addEventListener("click", () => {
      initRotation = 1;
      if (target) {
        target = false;
        targetControl.normal();
        map.setZoom(17);
        if (!northUp) {
          map.setTilt(60);
          infoDisplay.init();
          infoDisplay.update();
        }

      } else {
        if (!follow) {
          follow = true;
          followWide = false;
          this.activate();
        } else {
          northUp = !northUp;
          followWide = false;
          infoDisplay.init();
          infoDisplay.update();
          if (northUp) {
            map.setTilt(0);
            map.setHeading(0);
            buttonIcon.textContent = "my_location";
          } else {
            map.setTilt(60);
            map.setHeading(heading);
            buttonIcon.textContent = "assistant_navigation";
          }
        }
      }
      center();
    });
    return this;
  }

  activate() {
    if (darkMode) {
      this.controlButton.style.background = "blue";
    } else {
      this.controlButton.style.background = "blue";
    }
    this.controlButton.style.color = "white";
  }
  
  deactivate() {
    if (darkMode) {
      this.controlButton.style.background = "#444444";
    } else {
      this.controlButton.style.background = "white";
    }
    this.controlButton.style.color = "gray";
  }
}

class TargetControl extends ControlButton {
  constructor(map) {
    super();
    this.controlButton.style.marginBottom = "25px";
    this.controlButton.style.width = "200px";

    this.controlButton.title = "Click to toggle target mode";

    if (syncData.Route.at(0).dist < syncData.Route.at(-1).dist) {
      const mapLoc = syncData.Route.at(-1).dist - (syncData.TargetLocation_m - syncData.Location_m);
      var path_before = syncData.Route.filter(function(item, index){
        if (item.dist >= mapLoc) return true;
      });
      path_before.unshift({lng: syncData.Lon, lat: syncData.Lat});
      var path_after = syncData.Route.filter(function(item, index){
        if (item.dist <= mapLoc) return true;
      });
      path_after.push({lng: syncData.Lon, lat: syncData.Lat});
    } else {
      const mapLoc = syncData.Route.at(-1).dist + (syncData.TargetLocation_m - syncData.Location_m);
      var path_before = syncData.Route.filter(function(item, index){
        if (item.dist <= mapLoc) return true;
      });
      path_before.unshift({lng: syncData.Lon, lat: syncData.Lat});
      var path_after = syncData.Route.filter(function(item, index){
        if (item.dist >= mapLoc) return true;
      });
      path_after.push({lng: syncData.Lon, lat: syncData.Lat});
    }
    this.update(syncData.TargetName, 38.18, path_before, path_after, syncData.Color);
    
    
    if (target) {
      this.activate();
    } else {
      this.normal();
    }

    this.controlButton.addEventListener("click", () => {
      if (follow) {
        if (target) {
          if (overview) {
            overview = false;
            followWide = true;
          } else {
            if (followWide) {
              followWide = false;
            } else {
              overview = true;
            }
          }
          // overview != overview;
          // console.log(overview);
        } else {
          target = true;
          // followWide = false;
          // overview = false;
          this.activate();
          infoDisplay.init();
          infoDisplay.update();
          // follow = false;
          // followControl.deactivate();
          // this.normal();
          // fit(route_after.getPath().getArray().at(0), route_before.getPath().getArray().at(-1));
        }
        center();
      } else {
        // target = true;
        center(true, northUp, true);
        // map.panTo(marker_t.getPosition());
      }
    });
    return this;
  }
  
  update(targetName, prog, path_before, path_after, color) {
    this.controlButton.textContent = targetName;
    this.controlButton.appendChild(document.createElement("br"));
    const progressBar = document.createElement("progress");
    progressBar.setAttribute("id", "progress");
    progressBar.setAttribute("max", "100");
    progressBar.setAttribute("value", prog);
    this.controlButton.appendChild(progressBar);

    route_before.setPath(path_before);
    route_after.setPath(path_after);
    route_before.setOptions({strokeColor:color});
    route_after.setOptions({strokeColor:color});
  }
}


class SpeedDisplay extends ControlButton {
  constructor() {
    super();
    this.controlButton.style.width = "60px";
    this.controlButton.style.height = "60px";
    this.controlButton.style.borderRadius = "30px";
    // this.controlButton.style.fontFamily = "fantasy";
    this.controlButton.style.fontSize = "large";

    this.controlButton.addEventListener("click", () => {
      infoDisplay.toggleVisible();
    });

    this.update(62);
    
    return this;
  }
  
  update(speed) {
    const unit = document.createElement("div");
    unit.setAttribute("style", "font-size: x-small");
    unit.style.lineHeight = "6px";
    unit.textContent = "km/h";
    this.controlButton.textContent = `${Math.round(speed)}`
    this.controlButton.appendChild(unit);
  }
}

class InfoDisplay {
  constructor() {
    this.displayList = [];
    this.rangeMax = -300;
    const area = document.createElement("div");
    // area.style.display = "flex";
    area.style.flexDirection = "column";
    area.style.overflow = "scroll";
    area.style.scrollbarWidth = "none";
    area.style.height = "calc(calc(100vh - 100px) - mod(calc(100vh - 100px), 65px) + 5px)";
    area.style.marginLeft = "env(safe-area-inset-left)";
    // area.style.height = `${(window.innerHeight-100)-(window.innerHeight-100)%65+5}px`;
    this.area = area;
    this.visible = true;
  }

  async init() {
    if(mapData.mapName != syncData.MapName) {
      await getMapData(syncData.MapName);
    }
    this.rangeMax = syncData.MapLoc_m - 300;

    for(var i in this.displayList) {
      this.displayList[i].clear();
      this.area.removeChild(this.displayList[i].display);
    }

    this.displayList = [];
  }

  toggleVisible() {
    this.visible = !this.visible;
    this.init();
    this.update();
  }

  update() {
    if(!this.visible) {
      return;
    }
    // マップ選択
    if(syncData.TargetName != _syncData.TargetName) {
      this.init();
    }

    // 追加情報確認
    if(mapData.info.length > 0) {
      const data = mapData.info.filter(d => {
        return d.dist > this.rangeMax && d.dist < syncData.MapLoc_m+3000;
      })

      if(data.length > 0) {
        for(const d of data) {
          const pos = {lat: d.lat, lng: d.lng};
          const limitDisplay = new LimitDisplay(d.dist, d.limit, d.note, pos);
          this.displayList.push(limitDisplay);
          this.area.appendChild(limitDisplay.display);

          this.rangeMax = d.dist;
        }
      }
    }
    
    // 残距離更新
    for(var i in this.displayList) {
      const exist = this.displayList[i].update();
      if(!exist) {
        this.area.removeChild(this.displayList[i].display);
      }
    }

    // 削除
    this.displayList = this.displayList.filter(d => {
      return d.exist;
    });
  }
}


class LimitDisplay extends ControlButton {
  constructor(loc, limit, note, pos) {
    super();

    const display = document.createElement("div");
    display.style.width = "60px";
    display.style.height = "60px";
    display.style.borderRadius = "30px";
    display.style.border = "0px";
    display.style.margin = "5px 10px";
    display.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
    display.style.alignContent = "center";
    display.style.textAlign = "center";
    display.style.cursor = "pointer";
    display.style.background = "gray";
    // display.style.background = "conic-gradient(red 30deg, grey 30deg 360deg)";
    this.display = display;

    this.controlButton.style.width = "50px";
    this.controlButton.style.height = "50px";
    this.controlButton.style.borderRadius = "25px";
    this.controlButton.style.margin = "0px";
    this.controlButton.style.boxShadow = "none";
    // this.controlButton.style.fontFamily = "fantasy";
    this.controlButton.style.fontSize = "large";
    this.controlButton.style.fontWeight = "bold";
    this.controlButton.textContent = `${Math.round(limit)}`;

    if(note != undefined) {
      const noteDiv = document.createElement("div");
      noteDiv.setAttribute("style", "font-size: x-small");
      noteDiv.style.lineHeight = "6px";
      noteDiv.textContent = note;
      this.controlButton.appendChild(noteDiv);
    }

    this.display.appendChild(this.controlButton);

    var z = -limit;
    if(!northUp && !target) {
      if(loc > 0) {
        z = -Math.round(loc);
      } else {
        z = -Math.round(loc);
      }
    } else {
      if(loc > 0) {
        z = -limit*100000 - Math.round(loc);
      } else {
        z = -limit*100000 - Math.round(loc);
      }
    }
    this.marker = new LimitMarker(map, pos, Math.round(limit), note, z);

    this.loc = loc;
    this.limit = limit;
    this.note = note;
    this.pos = pos;
    this.exist = true;

    this.controlButton.addEventListener("click", () => {
      if(follow) {
        follow = false;
        followControl.deactivate();
      }
      if(target) {
        target = false;
        targetControl.normal();
        map.setZoom(17);
      }
      map.panTo(this.pos);
    });

    return this;
  }
  
  update() {
    const dist = this.loc - syncData.MapLoc_m;
    if(dist < -300) {
      this.clear();
      return false;
    } else {
      var c1 = "lightgrey";
      var c2 = "grey";
      if(darkMode) {
        c1 = "grey";
        c2 = "lightgrey";
      }

      if(dist > 3000) {
        this.display.style.background = c1;
      } else if(dist > 1000) {
        var prog_w = (3000-dist)/3000 * 360;
        this.display.style.background = `conic-gradient(${c2} ${prog_w}deg, ${c1} ${prog_w}deg 360deg)`;
      } else if(dist > 0) {
        var prog_w = (3000-dist)/3000 * 360;
        var prog = (1000-dist)/1000 * 360;
        this.display.style.background = `conic-gradient(${syncData.Color} ${prog}deg, ${c2} ${prog}deg ${prog_w}deg, ${c1} ${prog_w}deg 360deg)`;
      } else {
        this.marker.grey();
        this.deactivate();
        this.display.style.background = syncData.Color;
      }
      // console.log(dist, this.loc, this.limit, prog);
      return true;
    }
  }

  clear() {
    this.controlButton.style.visibility = "collapse";
    this.marker.remove();
    this.exist = false;
  }
}

class LimitMarker {
  constructor(map, pos, limit, note, z) {
    const plate = document.createElement("div");
    plate.style.width = "40px";
    plate.style.height = "30px";
    plate.style.border = "solid";
    plate.style.borderWidth = "3px";
    plate.style.borderColor = "black";
    if(!darkMode) {
      plate.style.background = "white";
    } else {
      plate.style.background = "lightgrey";
    }
    plate.style.boxShadow = "0 3px 9px rgba(0,0,0,1)";
    plate.style.fontSize = "large";
    // plate.style.fontFamily = "fantasy";
    plate.style.fontWeight = "bold";
    plate.style.alignContent = "center";
    plate.style.textAlign = "center";
    plate.textContent = limit;

    if(note != undefined) {
      const noteDiv = document.createElement("div");
      noteDiv.setAttribute("style", "font-size: x-small");
      noteDiv.style.lineHeight = "3px";
      noteDiv.textContent = note;
      plate.appendChild(noteDiv);
    }

    this.plate = plate;
    this.pos = pos;
    this.limit = limit;
    this.note = note;
    this.z = z;
    this.greyed = false;
    
    this.marker = new google.maps.marker.AdvancedMarkerElement({
      map,
      position: this.pos,
      content: this.plate,
      zIndex: this.z,
      gmpClickable: true
    });
  }
  
  grey() {
    if(!this.greyed) {
      this.remove();
      // if(!darkMode) {
      //   this.plate.style.background = "lightgrey";
      // } else {
      //   this.plate.style.background = "grey";
      // }
      this.plate.style.fontWeight = "normal";
      this.plate.style.borderWidth = "2px";
      this.plate.style.fontSize = "medium";
      this.plate.style.width = "36px";
      this.plate.style.height = "27px";
      this.plate.style.opacity = "70%";
      
      this.marker = new google.maps.marker.AdvancedMarkerElement({
        map,
        position: this.pos,
        content: this.plate,
        zIndex: -999999999,
        gmpClickable: true
      });

      this.greyed = true;
    }
  }

  remove() {
    this.marker.map = null;
    this.marker.remove();
  }
}

class StationMarker {
  constructor(map, pos, name, z) {
    var content = null;
    var match = name.match(/\w{2}-\d{2}/);
    
    if (match != null) {
      const split = match[0].split("-");
      
      content = document.createElement("div");
      content.style.boxShadow = "0 3px 9px rgba(0,0,0,1)";
      content.style.borderRadius = "5px";
      // content.style.background = "none";
      content.style.background = "black";
      match = name.match(/\[\w{3}\]/);
      if (match != null) {
        const letter = match[0].replace("[", "").replace("]", "");
        content.textContent = letter;
        content.style.padding = "3px";
        content.style.color = "white";
        content.style.borderRadius = "8px";
        content.style.textAlign = "center";
        content.style.fontSize = "15px";
        content.style.lineHeight = "14px";
        content.style.fontWeight = "bold";
        if (true) {
          content.style.border = "solid";
          content.style.borderWidth = "2px";
        }
      } else {
        content.style.padding = "1px";
        if (true) {
          content.style.background = "white";
        }
      }
      
      const plate = document.createElement("div");
      plate.style.width = "35px";
      plate.style.height = "35px";
      plate.style.margin = "2px";
      plate.style.border = "solid";
      plate.style.borderRadius = "3px";
      plate.style.borderWidth = "5px";
      plate.style.borderColor = syncData.Color;
      
      if(!darkMode) {
        plate.style.background = "white";
      } else {
        plate.style.background = "white";
      }
      plate.style.color = "black";
      plate.style.fontSize = "14px";
      plate.style.lineHeight = "16px";
      // plate.style.fontFamily = "fantasy";
      plate.style.fontWeight = "bold";
      plate.style.alignContent = "center";
      plate.style.textAlign = "center";

      const lineCode = document.createElement("p");
      lineCode.textContent = split[0];
      lineCode.style.margin = "0px";
      
      
      const numbering = document.createElement("p");
      numbering.textContent = split[1];
      numbering.style.margin = "0px";
      numbering.style.fontSize = "20px";

      
      if (split[0] == "JT") {
        plate.style.borderColor = "#F68B1E";
      } else if (split[0] == "JO") {
        plate.style.borderColor = "#0067c0";
      } else if (split[0] == "JJ") {
        plate.style.borderColor = "#00b261";
      } else if (split[0] == "JS") {
        plate.style.borderColor = "#e31f26";
      } else if (split[0] == "OI") {
        plate.style.borderWidth = "2px";
        plate.style.lineHeight = "normal";
        plate.style.fontWeight = "normal";
        plate.style.borderColor = "#a583a1";

        lineCode.textContent = "Ōito Line";
        lineCode.style.fontSize = "8px";
        lineCode.style.lineHeight = "9px";
        lineCode.style.margin = "1px";
        lineCode.style.transform = "scaleY(1.2)";

        numbering.style.fontSize = "28px";
        numbering.style.lineHeight = "25px";
      }

      plate.appendChild(lineCode);
      plate.appendChild(numbering);

      content.appendChild(plate);
    } else {

    }

    this.content = content;
    this.pos = pos;
    this.name = name;
    this.z = z;
    this.greyed = false;
    
    this.marker = new google.maps.marker.AdvancedMarkerElement({
      map,
      position: this.pos,
      content: this.content,
      zIndex: this.z,
      gmpClickable: true
    });
  }

  getPosition() {
    return this.pos;
  }

  remove() {
    this.marker.map = null;
    this.marker.remove();
  }
}

function fit(pos_a, pos_b) {
  const lat_a = pos_a.lat();
  const lat_b = pos_b.lat();
  const lng_a = pos_a.lng();
  const lng_b = pos_b.lng();
  const sw = new google.maps.LatLng(Math.min(lat_a, lat_b), Math.min(lng_a, lng_b));
  const ne = new google.maps.LatLng(Math.max(lat_a, lat_b), Math.max(lng_a, lng_b));

  map.fitBounds(new google.maps.LatLngBounds(sw, ne), 100);
}

function fitPath(pathArray) {
  if(typeof(pathArray.at(0).lat) == "function") {
    maxLat = Math.max(...pathArray.map(item => item.lat()));
    maxLng = Math.max(...pathArray.map(item => item.lng()));
    minLat = Math.min(...pathArray.map(item => item.lat()));
    minLng = Math.min(...pathArray.map(item => item.lng()));
  } else {
    maxLat = Math.max(...pathArray.map(item => item.lat));
    maxLng = Math.max(...pathArray.map(item => item.lng));
    minLat = Math.min(...pathArray.map(item => item.lat));
    minLng = Math.min(...pathArray.map(item => item.lng));
  }

  const margin = {
    top: parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sat")) + 80,
    bottom: parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sab")) + 80,
    left: parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sal")) + 100,
    right: parseInt(getComputedStyle(document.documentElement).getPropertyValue("--sar")) + 80
  }

  map.fitBounds(new google.maps.LatLngBounds({east:maxLng, north:maxLat, west:minLng, south:minLat}), margin);
}

function center(t=target, n=northUp, o=overview) {
  if (t) {
    if (o) {
      fitPath(route_before.getPath().getArray().concat(route_after.getPath().getArray()));
      // fit(route_after.getPath().getArray().at(0), route_before.getPath().getArray().at(-1));
    } else {
      if (followWide) {
        var path = [];
        const remaining = syncData.TargetLocation_m - syncData.Location_m;
        var from = 300;
        if (remaining < 2000) {
          from = 300 + (2000 - remaining);
        }
        if (syncData.Route.at(0).dist < syncData.Route.at(-1).dist) {
          const mapLoc = syncData.Route.at(-1).dist - remaining;
          path = syncData.Route.filter(function(item, index){
            if (item.dist >= mapLoc-from && item.dist <= mapLoc+2000) return true;
          });
        } else {
          const mapLoc = syncData.Route.at(-1).dist + remaining;
          path = syncData.Route.filter(function(item, index){
            if (item.dist <= mapLoc+from && item.dist >= mapLoc-2000) return true;
          });
        }
        fitPath(path);
      } else {
        if (syncData.TargetLocation_m-syncData.Location_m > 200) {
          fitPath(route_before.getPath().getArray());
          // fit(marker.getPosition(), marker_t.getPosition());
        } else {
          //map.panTo(marker.getPosition());
        }
      }
    }
  } else {
    if (n) {
      map.panTo(new google.maps.LatLng(syncData.Lat, syncData.Lon));
    } else {
      const offsetDistance = getOffsetDistance(150);
      // const offsetPixel = window.innerHeight * (1/2 - 0) - 150; // 画面の下1/4に配置するためのオフセット
      // const tilt = map.getTilt();
      // const offsetDistance = pixelToMeterDistance(offsetPixel) / Math.abs(Math.cos(degreesToRadians(tilt)));
      const offsetLatLng = getOffsetLatLng({lat: syncData.Lat, lng: syncData.Lon}, heading, offsetDistance);
      map.panTo(new google.maps.LatLng(offsetLatLng));
      map.setHeading(heading);
      //map.setCenter(new google.maps.LatLng(syncData.Lat, syncData.Lon));
    }
  }
}

// マップを初期化
function initMap() {

  var _position = {lat: syncData.Lat, lng: syncData.Lon}; // 有楽町の位置
  var _position_t = {lat: syncData.Route.at(-1).lat, lng: syncData.Route.at(-1).lng}; // 新橋の位置
  var _position_o = {lat: syncData.Route.at(0).lat, lng: syncData.Route.at(0).lng}; // 東京の位置
  var _tilt = 0;
  var _heading = 0;
  var _zoom = 17;
  var _mapTypeId = "roadmap";
  initRotation = 2;

  if (map!=undefined) {
    _tilt = map.getTilt();
    _heading = map.getHeading();
    _position = { lat: map.getCenter().lat(), lng: map.getCenter().lng() };
    _zoom = map.getZoom();
    _mapTypeId = map.getMapTypeId();
  }

  map = new google.maps.Map(document.getElementById('map'), {
    center: _position,
    zoom: _zoom,
    heading: _heading,
    tilt: _tilt,
    mapTypeId: _mapTypeId,
    //mapId: "4d591feb04e1a0be",
    colorScheme: colorScheme,
    cameraControl: false,
    zoomControl: false,
    mapTypeControl: false,
    scaleControl: true,
    streetViewControl: false,
    rotateControl: true,
    fullscreenControl: true
  });

    
  ov = new google.maps.OverlayView();
  ov.setMap(map);
  
  
  //const transitLayer = new google.maps.TransitLayer();
  //transitLayer.setMap(map);
  
  
  // 初期位置にマーカーを表示
  var pos = _position;
  var markerHeading = heading;
  if (marker!=undefined) {
    pos = marker.getPosition();
    markerHeading = marker.icon.rotation;
  }
  marker = new google.maps.Marker({
    position: pos,
    map: map,
    icon: {
      path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
      scale: 8,
      fillColor: "blue",
      fillOpacity: 1,
      strokeWeight: 3,
      strokeColor: "white",
      rotation: markerHeading
    }
  });
  // 初期位置にターゲットマーカーを表示
  var pos = _position_t;
  if (marker_t!=undefined) {
    pos = marker_t.getPosition();
  }
  marker_t = new StationMarker(map, pos, syncData.TargetName, -Math.round(syncData.TargetLocation_m));
  // marker_t = new google.maps.Marker({
  //   position: pos,
  //   map: map
  // });

  var pos = _position_o;
  if (marker_o!=undefined) {
    pos = marker_o.getPosition();
  }
  marker_o = new StationMarker(map, pos, syncData.OriginName, -Math.round(syncData.OriginLocation_m));
  // marker_o = new google.maps.Marker({
  //   position: pos,
  //   map: map
  // });
  
  // 初期ルート表示
  route_after = new google.maps.Polyline({
    path: syncData.Route,
    geodesic: true,
    strokeColor: syncData.Color,
    strokeOpacity: 0.5,
    strokeWeight: 8,
  });  
  route_after.setMap(map);

  route_before = new google.maps.Polyline({
    path: syncData.Route,
    geodesic: true,
    strokeColor: syncData.Color,
    strokeOpacity: 1.0,
    strokeWeight: 8,
  });  
  route_before.setMap(map);
  


  const targetControlDiv = document.createElement("div");
  targetControl = new TargetControl(map);
  targetControlDiv.appendChild(targetControl.controlButton);
  map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(targetControlDiv);
  
  const followControlDiv = document.createElement("div");
  followControl = new FollowControl(map);
  followControlDiv.appendChild(followControl.controlButton);
  map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(followControlDiv);
  
  const themeControlDiv = document.createElement("div");
  const themeControl = new ThemeControl(map);
  themeControlDiv.appendChild(themeControl.controlButton);
  map.controls[google.maps.ControlPosition.RIGHT_TOP].push(themeControlDiv);
  
  const styleControlDiv = document.createElement("div");
  const styleControl = new StyleControl(map);
  styleControlDiv.appendChild(styleControl.controlButton);
  map.controls[google.maps.ControlPosition.RIGHT_TOP].push(styleControlDiv);
  
  const headingControlDiv = document.createElement("div");
  const headingControl = new HeadingControl(map);
  headingControlDiv.appendChild(headingControl.controlButton);
  map.controls[google.maps.ControlPosition.RIGHT_TOP].push(headingControlDiv);
  
  const tiltControlDiv = document.createElement("div");
  const tiltControl = new TiltControl(map);
  tiltControlDiv.appendChild(tiltControl.controlButton);
  map.controls[google.maps.ControlPosition.RIGHT_TOP].push(tiltControlDiv);
  
  const zoomControlDiv = document.createElement("div");
  const zoomControl = new ZoomControl(map);
  zoomControlDiv.appendChild(zoomControl.controlButton);
  map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(zoomControlDiv);
          
  const speedDisplayDiv = document.createElement("div");
  const speedDisplay = new SpeedDisplay(map);
  speedDisplayDiv.appendChild(speedDisplay.controlButton);
  map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(speedDisplayDiv);
  
  const infoDisplayDiv = document.createElement("div");
  infoDisplay = new InfoDisplay(map);
  infoDisplayDiv.appendChild(infoDisplay.area);
  map.controls[google.maps.ControlPosition.LEFT_TOP].push(infoDisplayDiv);
  infoDisplay.update();

  map.controls[google.maps.ControlPosition.LEFT_TOP].getAt(0).style.marginTop = "env(safe-area-inset-top)";
  map.controls[google.maps.ControlPosition.RIGHT_TOP].getAt(0).style.marginTop = "env(safe-area-inset-top)";

  var interval = 3000;
  const url = new URL(location.href);
  const param_i = url.searchParams.get('i');
  if (param_i != null) {
    interval = param_i;
  }

  // 定期的にSyncDataを取得してマーカーの位置を更新
  intervalId = setInterval(async () => {
    _syncData = syncData;
    syncData = await getSyncData();
    if (syncData.Lat && syncData.Lon) {
      const newPosition = {
        lat: syncData.Lat,
        lng: syncData.Lon
      };
      
      // マーカー向きを計算
      const oldPosition = marker.getPosition();
      const markerIcon = marker.getIcon();
      const rotation = calculateBearing(oldPosition.lat(), oldPosition.lng(), newPosition.lat, newPosition.lng);

      // 速度を更新
      const distance_km = calculateDistance(oldPosition.lat(), oldPosition.lng(), newPosition.lat, newPosition.lng) / 1000;
      const time_h = (syncData.Pc_Time_ms - _syncData.Pc_Time_ms) / 1000 / 60 / 60;
      if (time_h > 0) {
        const speed = distance_km / time_h;
        speedDisplay.update(speed);
      }

      // ProgressBar, Route, markerを更新
      const prog = (syncData.Location_m - syncData.OriginLocation_m) / (syncData.TargetLocation_m - syncData.OriginLocation_m) * 100;
      if (syncData.Route.at(0).dist < syncData.Route.at(-1).dist) {
        const mapLoc = syncData.MapLoc_m;
        // const mapLoc = syncData.Route.at(-1).dist - (syncData.TargetLocation_m - syncData.Location_m);
        var path_before = syncData.Route.filter(function(item, index){
          if (item.dist >= mapLoc) return true;
        });
        path_before.unshift({lng: syncData.Lon, lat: syncData.Lat});
        var path_after = syncData.Route.filter(function(item, index){
          if (item.dist <= mapLoc) return true;
        });
        path_after.push({lng: syncData.Lon, lat: syncData.Lat});
      } else {
        const mapLoc = - syncData.MapLoc_m;
        // const mapLoc = syncData.Route.at(-1).dist + (syncData.TargetLocation_m - syncData.Location_m);
        var path_before = syncData.Route.filter(function(item, index){
          if (item.dist <= mapLoc) return true;
        });
        path_before.unshift({lng: syncData.Lon, lat: syncData.Lat});
        var path_after = syncData.Route.filter(function(item, index){
          if (item.dist >= mapLoc) return true;
        });
        path_after.push({lng: syncData.Lon, lat: syncData.Lat});
      }
      targetControl.update(targetName=syncData.TargetName, prog, path_before, path_after, syncData.Color);
      // marker_t.setPosition(new google.maps.LatLng(syncData.TargetLat, syncData.TargetLon));
      // marker_t.setPosition(new google.maps.LatLng(syncData.Route.at(-1).lat, syncData.Route.at(-1).lng));
      // marker_o.setPosition(new google.maps.LatLng(syncData.Route.at(0).lat, syncData.Route.at(0).lng));

      const d = Math.round(syncData.MapLoc_m - syncData.Location_m);
      // if (marker_t.name != syncData.TargetName) {
      if (marker_t.name != syncData.TargetName || d != _d) {
        marker_t.remove();
        marker_o.remove();
        marker_t = new StationMarker(map, new google.maps.LatLng(syncData.Route.at(-1).lat, syncData.Route.at(-1).lng), syncData.TargetName, -Math.round(syncData.MapLoc_m + (syncData.TargetLocation_m - syncData.Location_m)));
        marker_o = new StationMarker(map, new google.maps.LatLng(syncData.Route.at(0).lat, syncData.Route.at(0).lng), syncData.OriginName, -Math.round(syncData.MapLoc_m - (syncData.Location_m - syncData.OriginLocation_m)));
        if (target && overview) {
          center();
        }
      }
      _d = d;


      // 速度制限情報を更新
      infoDisplay.update();
      
      // マーカー位置を更新
      marker.setPosition(newPosition);
      if (rotation!=null && ((initRotation)||(heading==0)||(Math.abs(heading-rotation)<175)||(Math.abs(heading-rotation)>185))) {
        if (initRotation) {
          initRotation -= 1;
        }
        heading = rotation;

        // マップの中心を新しい位置に追従
        if (follow) {
          center();
        }

        markerIcon.rotation = rotation - map.getHeading();
        marker.setIcon(markerIcon);
      }
    }
  }, interval); // 2秒ごとに更新


  map.addListener("dragstart", () => {
    if (follow) {
      follow = false;
      followControl.deactivate();
    }
    if (target) {
      target = false;
      targetControl.normal();
    }
  });
  map.addListener("heading_changed", () => {
    const markerIcon = marker.getIcon();
    markerIcon.rotation = heading - map.getHeading();
    //console.log(heading, map.getHeading(), markerIcon.rotation)
    marker.setIcon(markerIcon);
  });
  map.addListener("tilt_changed", () => {
    var od, _od = 0;
    var id = setInterval(function() {
      if (follow && !northUp && !target) {
          od = getOffsetDistance(150);
          // console.log(od);
          center();
          if (od == _od) {
            clearInterval(id);
          }
          _od = od;
        }
      }, 500);
  });
  map.addListener("zoom_changed", () => {
    var od, _od = 0;
    var id = setInterval(function() {
      if (follow && !northUp && !target) {
          od = getOffsetDistance(150);
          center();
          if (od == _od) {
            clearInterval(id);
          }
          _od = od;
        }
      }, 500);

      const zoom = map.getZoom();
      for (display of infoDisplay.displayList) {
        display.marker.marker.map = zoom > 13 ? map : null;
      }
  });

  
}
